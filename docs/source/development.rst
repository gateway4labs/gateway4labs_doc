Development
===========

There are two ways for supporting virtual or remote laboatories in gateway4labs:

1. Developing a gateway4labs plug-in.

2. Using a simple iframe.

The first approach (iframe) makes sense for certain virtual laboratories, but also for remote laboratories that do not have any scheduling or authentication mechanism.

The second approach requires developing a plug-in. There are two main ways to do this:

1. Using the HTTP interface, so you can use any programming language.

2. Developing it in Python, to be included as a pure plug-in.

In this section, we are refering to virtual or remote laboratories as RLMS (Remote Laboratory Management System). Every remote laboratory has some kind of management system, which manage things like authentication, scheduling, registering, listing the laboratories, and so on. If you have a remote laboratory which does not have any of these features, still consider that your laboratory in this section is called RLMS.

Plug-in development
-------------------

The general idea of the plug-in development is that there is a set of methods that will be consumed by the core component in gateway4labs, code named ``labmanager``. Examples of the methods required are::

   get_version() -> returns the version of the supported API.

   reserve(some arguments) -> performs a reservation in the final system and returns a URL to be loaded.

There are two approaches for developing a plug-in:

1. Using the HTTP approach, where the developer provides a HTTP interface that the Labmanager understands. This plug-in can be developed in any programming languages (we do provide a set of examples in different languages, such as Java, PHP, .NET or Python).

2. Using the native API, where the developer uses an API to integrate their plug-in.

The first approach is recommended, while the second approach has advantages in terms of maintaining a single server and small advantages in latency.

HTTP version
^^^^^^^^^^^^

Introduction
............

In the case of the HTTP version, the plug-in is a component which is in the middle of the labmanager and the RLMS. It can optionally be implemented in the RLMS itself, but this depends on the RLMS developer. The Labmanager will perform some queries on the HTTP plug-in, which should translate them on the protocol used by the RLMS.

Cardinality
...........

By design, there can be more than one copy of the same RLMS. In the case of WebLab-Deusto or iLab Shared Architecture, this is clear, since there exists many nodes in different servers in different countries. In the case of PhET, this is not the case, since there is a single, centralized PhET server. 

However, the HTTP plug-in considers that there can be multiple copies of the same RLMS. In the case of PhET, for instance, it will be possible for the Labmanager administrator to create two different instances of the PhET RLMS, even if they point to the same point.

Authentication levels
.....................

There are four authentication levels that will be refered in this section:

* Student on Labmanager. This is transparent to the plug-in developer. It depends on the technology used (IMS LTI, HTTP, OpenSocial, or so on), so it is outside the scope of this section. Whenever the ``reserve`` method (or similar) is called, it is assumed that other layers of the Labmanager have validated it.

* Labmanager on plug-in. The plug-in is an HTTP interface, that will typically be publicly available. External users who are aware of the protocol should not be able to create manage reservations or call the provided methods. So all the methods of the HTTP interface being called by the Labmanager will rely on the standard and simple Basic HTTP Authentication (available in any HTTP library and easy to implement in any case). There is a single exception (mentioned below).

* Labmanager administrator on plug-in. Whenever the administrator registers an RLMS in the Labmanager, it will be forwarded to the Labmanager, to a setup method. This setup method is intended to be used by a Labmanager administrator. So a token or something similar must be provided to guarantee that the Labmanager administrator can enter without writing the credentials again. Typically, the Labmanager will call the plug-in, and it will return a URL which includes a random token. The Labmanager returns this URL to the administrator, who enters directly in the plug-in. The plug-in validates that token, and if it was generated by the plug-in, it is considered a valid administrator.

* Plug-in on the RLMS. Depending on the RLMS, the RLMS might not need any authentication. Or maybe the Labmanager is in the same network or even in the same process as the plug-in. But in many cases, the RLMS will require some credentials in an custom protocol that the plug-in will have to handle. For example, WebLab-Deusto uses its own authentication protocol based on JSON, while in iLab it's completely different, relying on SOAP. The plug-in, in these cases, must use those protocols.

Configuration management
........................

In some RLMS, certain settings are needed. There are three typical scenarios:

1. No configuration is required. For example, PhET virtual laboratories do not need anything.
2. A single system must be configured. This is the typical scenario: there is a remote laboratory in one location, not replicated anywhere else.
3. Multiple systems exists and must be configured. In the case of WebLab-Deusto, iLab Shared Architecture, and in the future other options (e.g., ViSHub), the plug-in might need details to identify what system.

In any case, if something needs to be stored, it will be stored in the plug-in side. The Labmanager does not store the configuration. This way, if secrets are stored or so, they do not need to be stored in the labmanager. This is especially useful if the Labmanager is located in other institution.

The way this configuration is stored is irrelevant. It could be a database, JSON or XML files, hardcoded or whatever the plug-in developer finds more convenient.

The setup process
.................

The Labmanager administrator goes to the Labmanager administration panel, to the RLMS section: 

There, the administartor clicks on Create, and among the following options, HTTP plug-in is selected:

Then, several information must be filled. The particular questions may vary in the future. Basically, a URL with documentation on the RLMS is shown.


Python version
^^^^^^^^^^^^^^

asdf


Virtual labs approach
---------------------

asdf


